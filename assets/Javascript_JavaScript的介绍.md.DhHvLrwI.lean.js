import{_ as c,c as r,j as e,a as i,G as t,a4 as d,B as p,o as l}from"./chunks/framework.HChY8QLq.js";const s="/js%E5%9B%BE.png",n="/ECMA.png",k=JSON.parse('{"title":"JavaScript的介绍","description":"","frontmatter":{},"headers":[],"relativePath":"Javascript/JavaScript的介绍.md","filePath":"Javascript/JavaScript的介绍.md","lastUpdated":null}'),h={name:"Javascript/JavaScript的介绍.md"};function v(S,a,m,J,b,u){const o=p("ArticleMetadata");return l(),r("div",null,[a[0]||(a[0]=e("h1",{id:"javascript的介绍",tabindex:"-1"},[i("JavaScript的介绍 "),e("a",{class:"header-anchor",href:"#javascript的介绍","aria-label":'Permalink to "JavaScript的介绍"'},"​")],-1)),t(o),a[1]||(a[1]=d('<h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><p>JavaScript 最初被创建的目的是“使网页更生动”</p><p>这种编程语言写出来的程序被称为<code>脚本</code>。它们可以被直接写在网页的<code>HTML</code>中，在页面加载的时候自动执行</p><p>脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行</p><p>如今，JavaScript不仅可以在浏览器中执行，也可以在服务端执行，甚至可以在任意搭载了<code>JavaScript 引擎</code>的设备中执行。</p><p>浏览器中嵌入了<code>JavaScript 引擎</code>，有时也称作<code>JavaScript 虚拟机</code></p><p>不同的引擎有不同的<code>代号</code>，例如</p><ul><li><a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)" target="_blank" rel="noreferrer">V8</a> —— Chrome、Opera和Edge中的<code>JavaScript 引擎</code></li><li><a href="https://en.wikipedia.org/wiki/SpiderMonkey" target="_blank" rel="noreferrer">SpiderMonkey</a>SpiderMonkey —— Firefox 中的<code>JavaScript 引擎</code></li><li>还有其他一些代号，像<code>Chakra</code>用于IE，<code>JavaScriptCore</code>、<code>Nitro</code>和<code>SquirrelFish</code>用于Safari，等等</li></ul><p>上面这些术语很容易记住，因为它们经常出现在开发者的文章中。我们也会用到这些术语。例如，如果<code>V8</code>支持某个功能，那么我们可以认为这个功能大概能在Chrome、Opera和Edge中正常运行</p><h3 id="浏览器中的javascript能做什么" tabindex="-1">浏览器中的JavaScript能做什么？ <a class="header-anchor" href="#浏览器中的javascript能做什么" aria-label="Permalink to &quot;浏览器中的JavaScript能做什么？&quot;">​</a></h3><p>现代的<code>JavaScript</code>是一种“安全的”编程语言。它不提供对内存或CPU的底层访问，因为它最初是为浏览器创建的，不需要这些功能</p><p><code>JavaScript</code>的能力很大程度上取决于它运行的环境。例如，<code>Node.js</code>支持允许<code>JavaScript</code>读取/写入任意文件，执行网络请求等的函数</p><p>浏览器中的<code>JavaScript</code>可以做与网页操作、用户交互和Web服务器相关的所有事情</p><p>例如，浏览器中的<code>JavaScript</code>可以做下面这些事：</p><ul><li>在网页中添加新的HTML，修改网页已有内容和网页的样式</li><li>响应用户的行为，响应鼠标的点击，指针的移动，按键的按动</li><li>向远程服务器发送网络请求，下载和上传文件（所谓的<a href="https://liaoxuefeng.com/books/javascript/browser/ajax/index.html" target="_blank" rel="noreferrer">AJAX</a>）</li><li>获取或设置 cookie，向访问者提出问题或发送消息</li><li>记住客户端的数据（<code>本地存储</code>）</li></ul><h3 id="是什么使得javascript与众不同" tabindex="-1">是什么使得JavaScript与众不同？ <a class="header-anchor" href="#是什么使得javascript与众不同" aria-label="Permalink to &quot;是什么使得JavaScript与众不同？&quot;">​</a></h3><p>至少有 3 件事值得一提</p><ul><li>与<code>HTML</code> <code>CSS</code>完全集成</li><li>简单的事，简单地完成</li><li>被所有的主流浏览器支持，并且默认开启 <code>JavaScript</code>是将这三件事结合在一起的唯一的浏览器技术</li></ul><p>这就是为什么<code>JavaScript</code>与众不同，这也是为什么它是用于创建浏览器界面的使用最广泛的工具</p><p>此外，<code>JavaScript</code>还可用于创建服务器和移动端应用程序等</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>JavaScript</code>最开始是专门为浏览器设计的一门语言，但是现在也被用于很多其他的环境 <code>JavaScript</code>作为被应用最广泛的浏览器语言，且与<code>HTML</code> <code>CSS</code>完全集成，具有独特的地位</p><h2 id="javascript的组成" tabindex="-1">JavaScript的组成 <a class="header-anchor" href="#javascript的组成" aria-label="Permalink to &quot;JavaScript的组成&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"></div><div class="blocks"><p><img src="'+s+'" alt="js" loading="lazy"></p></div></div><h2 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h2><p><code>ECMAScript</code>是由<code>ECMA</code>国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<code>JavaScript</code>或<code>JScript</code>，但实际上后两者是<code>ECMAScript</code>语言的实现和扩展</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"></div><div class="blocks"><p><img src="'+n+'" alt="ECMA" loading="lazy"></p></div></div><p><code>ECMAScript</code>：规定了<code>JS</code>的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套<code>JS</code>语法工业标准</p><p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview" target="_blank" rel="noreferrer">MDN手册</a></p><h3 id="dom-文档对象模型" tabindex="-1">Dom：文档对象模型 <a class="header-anchor" href="#dom-文档对象模型" aria-label="Permalink to &quot;Dom：文档对象模型&quot;">​</a></h3><p>文档对象模型（DocumentObject Model，简称 DOM ），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过<code>DOM</code>提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p><h3 id="bom-浏览器对象模型" tabindex="-1">Bom：浏览器对象模型 <a class="header-anchor" href="#bom-浏览器对象模型" aria-label="Permalink to &quot;Bom：浏览器对象模型&quot;">​</a></h3><p>浏览器对象模型 (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过<code>BOM</code>可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等</p><h2 id="开发者工具" tabindex="-1">开发者工具 <a class="header-anchor" href="#开发者工具" aria-label="Permalink to &quot;开发者工具&quot;">​</a></h2><p>在浏览器中，默认情况下用户是看不到错误的。所以，如果脚本中有错误，我们看不到是什么错误，更不能够修复它</p><p>为了发现错误并获得一些与脚本相关且有用的信息，浏览器内置了“开发者工具”</p><p>通常，开发者倾向于使用<code>Chrome</code>或<code>Firefox</code>进行开发，因为它们有最好的开发者工具</p><p>一些其它的浏览器也提供开发者工具，有时还具有一些特殊的功能，通常它们都是在追赶<code>Chrome</code>或<code>Firefox</code>。所以大多数人都有最喜欢的浏览器，当遇到某个浏览器独有的问题的时候，人们就会切换到其它的浏览器</p><p>开发者工具很强大，功能丰富。首先，我们将学习如何打开它们，查找错误和运行<code>JavaScript</code>命令</p><h3 id="google-chrome" tabindex="-1">Google Chrome <a class="header-anchor" href="#google-chrome" aria-label="Permalink to &quot;Google Chrome&quot;">​</a></h3><p>打开网页按下<code>F12</code>键</p><p>默认情况下，开发者工具会被在 Console 标签页中打开</p>',42))])}const g=c(h,[["render",v]]);export{k as __pageData,g as default};
